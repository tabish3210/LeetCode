PROBLEM NUMBER ::  2429. Minimize XOR

// Date :: 15 Jan 2025


// Approach 1: Compact Iterative Bitwise Manipulation

class Solution {
public:
    int minimizeXor(int num1, int num2) {
        int a = __builtin_popcount(num1);
        int b = __builtin_popcount(num2);
        int res = num1;
        for (int i = 0; i < 32; ++i) {
            if (a > b && (1 << i) & num1) {
                res ^= 1 << i;
                --a;
            }
            if (a < b && !((1 << i) & num1)) {
                res ^= 1 << i;
                ++a;
            }
        }
        return res;
    }
};


/* 
     Approach 2: Modularized Helper Functions

class Solution {
public:
    int countSetBits(int num) {
        int count = 0;
        while (num) {
            count += num & 1;
            num >>= 1;
        }
        return count;
    }
    
    int addSetBits(int num, int bitsToAdd) {
        int bitPos = 0;
        while (bitsToAdd > 0) {
            while ((num >> bitPos) & 1) ++bitPos;
            num |= (1 << bitPos);
            --bitsToAdd;
        }
        return num;
    }

    int removeSetBits(int num, int bitsToRemove) {
        while (bitsToRemove > 0) {
            num &= (num - 1);
            --bitsToRemove;
        }
        return num;
    }
    
    int minimizeXor(int num1, int num2) {
        int setBitsNum1 = countSetBits(num1);
        int setBitsNum2 = countSetBits(num2);

        if (setBitsNum1 == setBitsNum2) return num1;
        if (setBitsNum1 < setBitsNum2) return addSetBits(num1, setBitsNum2 - setBitsNum1);
        return removeSetBits(num1, setBitsNum1 - setBitsNum2);
    }
};

*/
