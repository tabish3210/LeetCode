PROBLEM  NUMBER                                       :-                                                1295. Find Numbers with Even Number of Digits


// Date : 30 Apr 2025

// Approach  â†’ Counting digits recursively

class Solution {
public:
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (int i : nums) {
            if (countDigits(i) % 2 == 0) ++count;
        } 
        return count;
    }
    int countDigits(int x) {
        int cnt = 0;
        while (x > 0) {
            x /= 10;
            ++cnt;
        }
        return cnt;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//  Bit Manipulation Implementation


class Solution {
    public:
        int findNumbers(vector<int>& nums) {
            int count = 0;
            for (int i : nums) {
                int msb = 31 - __builtin_clz(i); 
                int digits = (msb * 0.30103) + 1;
                if (i >= pow(10, digits)) ++digits;
                if (digits % 2 == 0) {
                    ++count;
                }
            }
            return count;
        }
    };

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ðŸš€ Approach  â†’ Math
We can simply find the number of digits in a number by using log base 10 on it.
So we can simply traverse through nums and take the log base 10 of each number and check whether its even or not.
For Example : for i = 127,
digits = log(i) + 1 = log(127) + 1 = floor(2.1038) + 1 = 3



class Solution {
public:
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (int i : nums) {
            int digits = log10(i) + 1;
            if (digits % 2 == 0) ++count;
        } 
        return count;
    }
