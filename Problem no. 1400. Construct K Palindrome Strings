PROBLEM NUMBER ::  1400. Construct K Palindrome Strings

// DATE :: 11 Jan 2025


//Approach 1st  // BIT MASKING
class Solution {
public:
    bool canConstruct(string s, int k) {
        if (s.length() < k) return false;

        int bitmask = 0;
        for (char c : s) {
            bitmask ^= (1 << (c - 'a'));
        }

        int oddCount = __builtin_popcount(bitmask);
        return oddCount <= k;
    }
};

// APPROACH 2nd // USING a Counter

#include <unordered_map>
using namespace std;

class Solution {
public:
    bool canConstruct(string s, int k) {
        if (s.length() < k) return false;

        unordered_map<char, int> charCount;
        for (char c : s) {
            charCount[c]++;
        }

        int oddCount = 0;
        for (auto& entry : charCount) {
            if (entry.second % 2 != 0) oddCount++;
        }

        return oddCount <= k;
    }
};
