PROBLEM NUMBER :: 1462. Course Schedule IV

// DATE : 27 Jan 2025

// Simple Unordered map Number Linking

class Solution {
public:
    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        // Step 1: Initialize the reachability map
        unordered_map<int, unordered_set<int>> reachable;

        // Step 2: Build direct reachability chains
        for (auto& prereq : prerequisites) {
            reachable[prereq[1]].insert(prereq[0]);
        }

        // Step 3: Propagate reachability to account for indirect prerequisites
        for (int i = 0; i < numCourses; ++i) {
            for (int j = 0; j < numCourses; ++j) {
                if (reachable[j].count(i)) {
                    reachable[j].insert(reachable[i].begin(), reachable[i].end());
                }
            }
        }

        // Step 4: Answer the queries
        vector<bool> result;
        for (auto& query : queries) {
            result.push_back(reachable[query[1]].count(query[0]) > 0);
        }
        return result;
    }
};


/////////////////////////////////////////////////////////


// METHOD 2nd

// Kahn's Alg+ array over bitset

class Solution {
public:
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        bitset<100> rpath[100]={0};
        vector<char> adj[100];

        char deg[100]={0};// indegree
        for(auto& e: prerequisites){
            char a=e[0], b=e[1];
            adj[a].push_back(b);
            rpath[b][a]=1;
            deg[b]++;
        }

        queue<int> q;
        for(int i=0; i<n; i++)
            if (deg[i]==0) q.push(i);// deg 0 nodes
        
        while(!q.empty()){
            auto i=q.front();
            q.pop();
            for(int j: adj[i]){
                rpath[j]|=rpath[i];
                if (--deg[j]==0) q.push(j);
            }
        }
        const int m=queries.size();
        vector<bool> ans(m, 0);
        for(int i=0; i<m; i++)
            ans[i]=rpath[queries[i][1]][queries[i][0]];
        return ans;
    }
};
