PROBLEM NUMBER :-  1726. Tuple with Same Product

// Date : 06 Feb 2025


/*
    Approach 1st  // Code sort with 2 pointers

class Solution {
public:
    static int tupleSameProduct(vector<int>& nums) {
        const int n=nums.size(), N=n*(n-1)/2;
        vector<int> product;
        product.reserve(N);
        for(int i=0; i<n-1; i++)
            for(int j=i+1; j<n; j++)
                product.push_back(nums[i]*nums[j]);
        sort(product.begin(), product.end());
        int ans=0, j=1, f=1;
        for(int i=2; i<N; i++){
            if (product[j]==product[i]) f++;
            else{
                if (f>1) ans+=f*(f-1)*4;
                f=1;
                j=i;
            }
        } 
        return ans;
    }
};

*/

///////////////////////////////////////////////////////////////////////////////////////

/* 
     Approach 2nd   // Code with hash map

class Solution {
public:
    int tupleSameProduct(vector<int>& nums) {
        const int n=nums.size();
        unordered_map<int, int> freq;// hash map less efficient
        freq.reserve(n*(n-1)/2);// reserve space
        for(int i=0; i<n-1; i++)
            for(int j=i+1; j<n; j++)
                freq[nums[i]*nums[j]]++;
        // no need for sort
        int ans=0;
        for(auto& [x, f]: freq){ // easy single loop
            if (f>1) ans+=f*(f-1)*4;
        }
        return ans;
    }
};

*/

/////////////////////////////////////////////////////////////////////////////////

/*
     Approach 3rd   //  Code with radix sort

vector<int> bucket[512]; 
void radix_sort(vector<int>& nums) {
    // 1st round
    for (int& x : nums) {
        bucket[x & 511].push_back(x);
    }
    int i = 0;
    for (auto& B : bucket) {
        for (auto v : B)
            nums[i++] = v;
        B.clear();
    }
    // 2nd round
    for (int& x : nums)
        bucket[(x >> 9) & 511].push_back(x);
    i = 0;
    for (auto& B : bucket) {
        for (auto v : B)
            nums[i++] = v;
        B.clear();
    }
    // 3rd round
    for (int& x : nums)
        bucket[x >> 18].push_back(x);
    i = 0;
    for (auto& B : bucket) {
        for (auto v : B) 
            nums[i++] = v ;
            B.clear();
    }
}
class Solution {
public:
    static int tupleSameProduct(vector<int>& nums) {
        const int n=nums.size(), N=n*(n-1)/2;
        vector<int> product;
        product.reserve(N);
        for(int i=0; i<n-1; i++)
            for(int j=i+1; j<n; j++)
                product.push_back(nums[i]*nums[j]);
        radix_sort(product);
        int ans=0, j=1, f=1;
        for(int i=2; i<N; i++){
            if (product[j]==product[i]) f++;
            else{
                if (f>1) ans+=f*(f-1)*4;
                f=1;
                j=i;
            }
        } 
        return ans;
    }
};

*/
