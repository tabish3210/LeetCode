PROBLEM  NUMBER                                                                                               :-                                                               3405. Count the Number of Arrays with K Matching Adjacent Elements

// Date : 17 June 2025


// Approach: Combinatorial Mathematics

const int mod=1e9+7;
class Solution {
public:
    static inline long long modPow(long long x, int exp, int Mod=mod){
        if (exp==0) return 1;
        int y=(exp&1)?x:1;
        return modPow(x*x%Mod, exp>>1)*y%Mod;
    }

    // Euclidean algo finds x, y, d such that ax+by = d where d=gcd(a, b)
    static inline int modInverse(int a, int b=mod) {//mod is prime d=1
        int x0 = 1, x1 = 0;
        int r0 = a, r1 = b;
        while (r1 != 0) {
            int q = r0/r1, rr = r1, xx = x1;
            r1 = r0-q * r1;
            x1 = x0-q * x1;
            r0 = rr;
            x0 = xx;
        }
        if (x0 < 0) x0+= b;
        return x0;
    }
    static long long comb(int n, int k){
        if (n<2*k) return comb(n, n-k);
        long long denominator=1;
        for(int i=1; i<=k; i++){
            denominator*=i;
            if (denominator>mod) denominator%=mod;
        }
        long long ans=modInverse(denominator);
        for (int i=n; i>=n-k+1; i--){
            ans*=i;
            if (ans>mod) ans%=mod;
        }
        return ans;
    }
    static int countGoodArrays(int n, int m, int k) {
        return m*modPow(m-1, n-k-1)%mod*comb(n-1, k)%mod;
        
    }
};





//////////////////////////////////////////////////////////////////////////////////////////////////////////         OR       /////////////////////////////////////////////////////////

// Simmilar but better
const int MOD = 1e9 + 7;
const int MX = 1e5;

long long fact[MX];
long long inv_fact[MX];

class Solution {
    long long qpow(long long x, int n) {
        long long res = 1;
        while (n) {
            if (n & 1) {
                res = res * x % MOD;
            }
            x = x * x % MOD;
            n >>= 1;
        }
        return res;
    }

    long long comb(int n, int m) {
        return fact[n] * inv_fact[m] % MOD * inv_fact[n - m] % MOD;
    }
    void init() {
        if (fact[0]) {
            return;
        }
        fact[0] = 1;
        for (int i = 1; i < MX; i++) {
            fact[i] = fact[i - 1] * i % MOD;
        }

        inv_fact[MX - 1] = qpow(fact[MX - 1], MOD - 2);
        for (int i = MX - 1; i; i--) {
            inv_fact[i - 1] = inv_fact[i] * i % MOD;
        }
    }

public:
    int countGoodArrays(int n, int m, int k) {
        init();
        return comb(n - 1, k) * m % MOD * qpow(m - 1, n - k - 1) % MOD;
    }
};
