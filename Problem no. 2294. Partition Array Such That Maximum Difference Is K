PROBLEM NUMBER                                                                               :-                                                               2294. Partition Array Such That Maximum Difference Is K

// Date : 19 June 2025


// Greedy  || Sorting

class Solution {
public:
    int partitionArray(std::vector<int>& nums, int k) {
        std::sort(nums.begin(), nums.end());
        int ans = 1;
        int min_val = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] - min_val > k) {
                ans++;
                min_val = nums[i];
            }
        }
        return ans;
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// C++ counting sort

// the C++ version shown in the film
class Solution {
public:
    static int partitionArray(vector<int>& nums, int k) {
        if (nums.size() == 1)
            return 1; // edge case

        int freq[100001] = {0}, xMax = -1;
        for (int x : nums) {
            freq[x]++;
            xMax = max(xMax, x);
        }

        int partitions = 0;
        for (int x = 0; x <= xMax;) { // start from 0
            // skip x when freq[x]=0
            while (x <= xMax && freq[x] == 0)
                x++;
            if (x > xMax)
                break;

            int end = x + k; // subsequence max
            partitions++;
            x = end + 1; // next subsequence min
        }
        return partitions;
    }
};
