PROBLEM   NUMBER                                 :-                      2799. Count Complete Subarrays in an Array

// Date : 24 Apr 2025

// Approach 1 â†’ Using Two Pointers  || Brute Force

class Solution {
    public:
        int countCompleteSubarrays(vector<int>& nums) {
            int k = unordered_set<int>(nums.begin(),nums.end()).size(), res = 0;
            for (int i = 0; i < nums.size(); i++) {
                unordered_set<int> st;
                for (int j = i; j < nums.size(); j++) {
                    st.insert(nums[j]);
                    if (st.size() == k) res++;
                }
            }
            return res;
        }
    };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Approach 2 â†’ Using Sliding Window ðŸš€

class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums, int left = 0, int res = 0) {
        int k = unordered_set<int>(nums.begin(),nums.end()).size();
        unordered_map<int, int> mpp;

        for (int i = 0; i < nums.size(); ++i) {
            mpp[nums[i]]++;
            while (mpp.size() == k) {
                res += nums.size() - i;  
                mpp[nums[left]]--;
                if (mpp[nums[left]] == 0) mpp.erase(nums[left]);
                left++;
            }
        }
        return res;
    }
};
