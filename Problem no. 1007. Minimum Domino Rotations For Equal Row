PROBLEM  NUMBER                                                :-                                               1007. Minimum Domino Rotations For Equal Row

// Date : 03 May 2025



//  Hashmap

class Solution {
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        int res = INT_MAX;

        int face[7] = {};
        for(int i = 0; i < tops.size(); i++) {
            face[tops[i]]++;
            if(bottoms[i] != tops[i]) face[bottoms[i]]++;
        }

        // for each possible face from 1...6
        for(int x = 1; x <= 6; x++) {
            if(face[x] < tops.size()) continue;      // can't fill entire row

            int maintainTop = 0, maintainBottom = 0;
            bool possible = true;

            // count flips
            for(int i = 0; i < tops.size(); i++) {
                if (tops[i] != x && bottoms[i] != x) {
                    possible = false; 
                    break;
                }
                if (tops[i] != x)      maintainTop++;
                if (bottoms[i] != x)   maintainBottom++;
            }

            if (possible) 
                res = min(res, min(maintainTop, maintainBottom));
        }

        return res == INT_MAX ? -1 : res;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//  Greedy + Single Pass Pruning

class Solution 
{
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) 
    {
        // Step 1: Try making all values equal to tops[0]
        int result = check(tops[0], tops, bottoms);

        // Step 2: If it's possible, return the result
        if (result != -1)
        {
            return result;
        } 

        // Step 3: Otherwise, try bottoms[0]
        return check(bottoms[0], tops, bottoms);
    }

private:
    // Step 4: Helper function to count required rotations
    int check(int target, vector<int>& tops, vector<int>& bottoms) 
    {
        int rotateTop = 0;     // Rotations to bring target to top
        int rotateBottom = 0;  // Rotations to bring target to bottom

        // Step 5: Loop through all dominoes
        for (int i = 0; i < tops.size(); ++i) 
        {
            // Step 6: If target is not present on either side, it's impossible
            if (tops[i] != target && bottoms[i] != target) 
            {
                return -1;
            }

            // Step 7: Count how many times we must rotate to top
            if (tops[i] != target)
            {
                rotateTop++;
            } 

            // Step 8: Count how many times we must rotate to bottom
            if (bottoms[i] != target)
            {
                rotateBottom++;
            } 
        }

        // Step 9: Return the minimum number of rotations needed
        return min(rotateTop, rotateBottom);
    }
};
