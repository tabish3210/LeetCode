PROBLEM NUMBER     :-     2401. Longest Nice Subarray

// Date : 18 Mar 2025


//  Sliding Window

class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        int n = nums.size();
        int max_length = 1;
        int left = 0;
        int used_bits = 0;
        
        for (int right = 0; right < n; ++right) {
            while ((used_bits & nums[right]) != 0) {
                used_bits ^= nums[left];
                ++left;
            }
            
            used_bits |= nums[right];
            max_length = max(max_length, right - left + 1);
        }
        
        return max_length;
    }
};

//////////////////////////////////// 

// Second Method 

// Bit Manupulation 

#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        int l = 0, usedBits = 0, maxLength = 0;

        for (int r = 0; r < nums.size(); r++) {
            while ((usedBits & nums[r]) != 0) {
                usedBits ^= nums[l];
                l++;
            }

            usedBits |= nums[r];
            maxLength = max(maxLength, r - l + 1);
        }

        return maxLength;
    }
};
