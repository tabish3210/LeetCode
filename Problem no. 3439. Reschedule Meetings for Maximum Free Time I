PROBLEM  NUMBER                                                                       :                                                  3439. Reschedule Meetings for Maximum Free Time I


// Date : 09 july 2025



//  Greedy  | Sliding Window

class Solution {
public:
    int maxFreeTime(int eventTime, int k, vector<int>& st, vector<int>& et) {
         int n = st.size();
        vector<int> gaps(n + 1);

        // Compute gaps
        gaps[0] = st[0];  
        gaps[n] = eventTime - et[n - 1];  
        for(int i = 1; i < n; i++){
            gaps[i] = st[i] - et[i - 1];
        }

        // Sliding window of size k + 1
        int window = 0;
        for(int i = 0; i <= k; i++){
            window += gaps[i];
        }

        int ans = window;
        for(int i = k + 1; i <= n; i++){
            window += gaps[i] - gaps[i - (k + 1)];
            ans = max(ans, window);
        }

        return ans;
    }
};


////////////////////////////////////////////////////////////////////////////////////      OR           ////////////////////////////////////////////////////////////////////////////////////////



//  Greedy  | Sliding Window


class Solution {
public:
    int maxFreeTime(int eventTime, int k, vector<int>& startTime, vector<int>& endTime) {
        int n = startTime.size();
        vector<int> gap(n + 1);

        // Calculate gaps between events
        for (int i = 1; i < n; i++) {
            gap[i] = startTime[i] - endTime[i - 1];
        }
        gap[0] = startTime[0]; // before first event
        gap[n] = eventTime - endTime[n - 1]; // after last event

        // Sliding window of size k + 1
        int i = 0, j = k;
        int maxa = 0, sum = 0;

        // Initial window sum
        for (int w = i; w <= n && w <= j; w++) {
            sum += gap[w];
        }
        maxa = max(maxa, sum);

        // Slide the window
        while (j < n) {
            sum -= gap[i++];
            sum += gap[++j];
            maxa = max(maxa, sum);
        }

        return maxa;
    }
};
