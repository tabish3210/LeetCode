PROBLEM NUMBER  :-   1415. The k-th Lexicographical String of All Happy Strings of Length n


// Date : 19 Feb 2025


// Backtracking | Sorting | RECURSION

class Solution {
public:
    string getHappyString(int n, int k) {
        // Instead of generating all strings, we can calculate position directly
        int totalPossible = 3 * (1 << (n-1));  // 3 * 2^(n-1) possible strings
        
        if (k > totalPossible) return "";
        
        string result;
        k--; // Convert to 0-based index
        
        // First character can be a,b,c
        result += ('a' + k/((1 << (n-1))));
        k %= (1 << (n-1));
        
        // For remaining positions
        for (int i = 1; i < n; i++) {
            // If last char was 'a', can use 'b' or 'c'
            // If last char was 'b', can use 'a' or 'c'
            // If last char was 'c', can use 'a' or 'b'
            if (result.back() == 'a') {
                result += (k & (1 << (n-i-1))) ? 'c' : 'b';
            } else if (result.back() == 'b') {
                result += (k & (1 << (n-i-1))) ? 'c' : 'a';
            } else { // result.back() == 'c'
                result += (k & (1 << (n-i-1))) ? 'b' : 'a';
            }
        }
        
        return result;
    }
};
