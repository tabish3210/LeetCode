PROBLEM  NUMBER                                                                       :                                                         1695. Maximum Erasure Value

// Date : 22 July 2025


// Sliding Window | Hash Table DP



#include <vector>
#include <unordered_set>
#include <algorithm>

using namespace std;

class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int n = nums.size();
        unordered_set<int> seen;
        int left = 0;
        int currentSum = 0;
        int maxSum = 0;
        
        for (int right = 0; right < n; ++right) {
            while (seen.find(nums[right]) != seen.end()) {
                currentSum -= nums[left];
                seen.erase(nums[left]);
                ++left;
            }
            currentSum += nums[right];
            seen.insert(nums[right]);
            maxSum = max(maxSum, currentSum);
        }
        
        return maxSum;
    }
};

///////////////////////////////////////////////////////////////////////////////////////   OR   /////////////////////////////////////////////////////////////////////////


class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int l = 0, r = 0;
        int n = nums.size();
        map<int, int> mp;
        int sum = 0, maxi = 0;

        while (r < n) {
            mp[nums[r]]++;
            sum += nums[r];

            while (r - l + 1 > mp.size()) {
                mp[nums[l]]--;
                sum -= nums[l];
                if (mp[nums[l]] == 0) mp.erase(nums[l]);
                l++;
            }

            maxi = max(maxi, sum);
            r++;
        }

        return maxi;
    }
};
